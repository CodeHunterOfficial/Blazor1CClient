@page "/"
@inject IStudentService StudentService
@using Blazor1CClient.Models
@using Blazor1CClient.Services
@inject ILogger<Students> Logger
@rendermode RenderMode.InteractiveServer

<h1>Student Data</h1>
<p>Blazor CRUD operations</p>

<!-- Search bar -->
<div class="row">
    <div class="col-md-6">
        <a href='/students/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i> Add Student
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search student by name"
               @bind="SearchString" @bind:event="oninput" />
        <div class="input-group-append">
            <button class="btn btn-outline-primary" @onclick="FilterStudents" title="Search">
                <i class="fas fa-search"></i> Search
            </button>
            @if (SearchString.Length > 0)
            {
                <button class="btn btn-outline-danger" @onclick="ResetSearch" title="Clear">
                    <i class="fas fa-times"></i> Clear
                </button>
            }
        </div>
    </div>
</div>
<br />

@if (studentList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Course</th>
                <th>Date of Birth</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in PaginatedStudents)
            {
                <tr>
                    <td>@student.Код</td>
                    <td>@student.ФИО</td>
                    <td>@student.Курс</td>
                    <td>@student.ДатаРождения</td>
                    <td>
                        <a href='/students/edit/@student.Код' class="btn btn-outline-dark" role="button">Edit</a>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteStudent(student.Код))"> Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination controls -->
    <div class="pagination">
        <button class="btn btn-outline-primary" @onclick="() => ChangePage(Page - 1)" disabled="@IsFirstPage()">Previous</button>
        <span>Page @Page of @TotalPages</span>
        <button class="btn btn-outline-primary" @onclick="() => ChangePage(Page + 1)" disabled="@IsLastPage()">Next</button>
    </div>
}

@code {
    private List<Student> studentList = new();
    private List<Student> searchStudentData = new();
    private List<Student> PaginatedStudents = new();
    private string SearchString { get; set; } = string.Empty;
    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 2;
    private int TotalPages => (int)Math.Ceiling(studentList.Count / (double)PageSize);

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Students page initialized");
        await GetStudents();
    }

    private async Task GetStudents()
    {
        try
        {
            studentList = await StudentService.GetStudentsAsync();
            searchStudentData = studentList;
            ApplyPagination();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while fetching student data");
        }
    }

    private void FilterStudents()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            studentList = searchStudentData
                .Where(x => x.ФИО.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            studentList = searchStudentData;
        }
        ApplyPagination();
    }

    private void ResetSearch()
    {
        SearchString = string.Empty;
        studentList = searchStudentData;
        ApplyPagination();
    }

    private void ApplyPagination()
    {
        PaginatedStudents = studentList
            .Skip((Page - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private async Task DeleteStudent(string studentCode)
    {
        var isSuccess = await StudentService.DeleteStudentAsync(studentCode);
        if (isSuccess)
        {
            Logger.LogInformation($"Student with code {studentCode} was deleted.");
            await GetStudents();
        }
        else
        {
            Logger.LogError($"Failed to delete student with code {studentCode}");
        }
    }

    private void ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= TotalPages)
        {
            Page = newPage;
            ApplyPagination();
        }
    }

    private bool IsFirstPage() => Page == 1;
    private bool IsLastPage() => Page == TotalPages;
}
